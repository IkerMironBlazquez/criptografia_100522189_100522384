
GUÍA DE DESARROLLO: APLICACIÓN QUEDADAS DE PERROS SEGURA

CONCEPTOS CLAVE:

bcrypt:
- Función hash especializada para contraseñas con salt automático incluido.
- Es IRREVERSIBLE (no se puede descifrar la contraseña original).
- Usa algoritmo Blowfish con múltiples rondas (configurables) para ser lento y resistente a ataques de fuerza bruta.
- El salt se genera automáticamente y se incluye en el hash final.

salt:
- Valor aleatorio único que se añade a las contraseñas antes del hash.
- Protege contra ataques de diccionario y rainbow tables.
- Hace que dos usuarios con la misma contraseña tengan hashes diferentes.
- En bcrypt se genera automáticamente y se incluye en el resultado.
- Ejemplo: salt="AbCdEfGh", contraseña+salt="MiPerro123!AbCdEfGh"

HMAC (Hash-based Message Authentication Code):
- Código de autenticación que verifica la INTEGRIDAD de mensajes.
- Funciona como un "sello de cera digital" - detecta si el mensaje fue modificado.
- Se calcula combinando el mensaje con una clave secreta compartida.
- Es IRREVERSIBLE pero VERIFICABLE - no descifras, solo verificas.

SHA-256 (Secure Hash Algorithm):
- Función hash criptográfica que produce resúmenes de 256 bits (32 bytes).
- Es IRREVERSIBLE - no se puede recuperar el dato original del hash.
- Cualquier cambio mínimo en la entrada cambia completamente la salida.
- Usado internamente por HMAC-SHA256 para los cálculos criptográficos.

IV (Vector de Inicialización):
- Valor aleatorio único usado en cifrado simétrico para inicializar el algoritmo.
- Hace que cifrar el mismo mensaje dos veces produzca resultados diferentes.
- Debe ser aleatorio y único por cada operación de cifrado.
- Se puede almacenar en claro junto al mensaje cifrado (no es secreto).

AES-256-CBC:
- AES = Advanced Encryption Standard, algoritmo de cifrado simétrico estándar.
- 256 = Tamaño de clave en bits (32 bytes), muy seguro.
- CBC = Cipher Block Chaining, modo de operación que usa IV.
- Es REVERSIBLE - puedes cifrar y descifrar con la misma clave.
- Cada bloque se combina con el anterior usando XOR.

Base64:
- Codificación que convierte datos binarios en texto ASCII legible.
- Usa 64 caracteres: A-Z, a-z, 0-9, +, /
- Permite guardar datos binarios (cifrados, claves, imágenes) en JSON/XML.
- NO es cifrado, es solo conversión de formato.
- Ejemplo: binario [255,216,255] → Base64 "/9j/"

PBKDF2 (Password-Based Key Derivation Function):
- Función que genera claves criptográficas a partir de contraseñas.
- Aplica múltiples iteraciones para hacer lento el proceso (anti-fuerza bruta).
- Usa salt para hacer cada derivación única.
- Útil para generar claves AES a partir de contraseñas de usuario.

PKCS7 (Padding Scheme):
- Método de relleno para cifrado por bloques como AES.
- AES cifra en bloques de 16 bytes, PKCS7 rellena datos hasta completar el bloque.
- Añade bytes con el valor del número de bytes añadidos (ej: si faltan 3 bytes, añade [3,3,3]).
- Al descifrar, lee el último byte para saber cuántos bytes quitar del relleno.




1: CREACIÓN DE CLASES BÁSICAS


CLASE USUARIO (autenticacion.py):
- __init__(nombre_usuario, email, hash_contraseña)
- método validar_contraseña_robusta(contraseña)
- método hash_contraseña(contraseña)
- método verificar_contraseña(contraseña, hash_almacenado)
- método registrar_usuario(nombre, contraseña, email)
- método autenticar_usuario(nombre, contraseña)
- método cargar_usuarios()
- método guardar_usuarios()
- método to_dict()
- método from_dict(data)

CLASE PERRO (clases.py):
- __init__(nombre, identificador_oficial, foto_base64)
- método to_dict()
- método from_dict(data)
- método validar_identificador()
- método generar_id_publico()

CLASE MENSAJE (clases.py):
- __init__(remitente_id, destinatario_id, contenido)
- método cifrar_contenido()
- método descifrar_contenido()
- método generar_hmac()
- método verificar_hmac()
- método to_dict()
- método from_dict(data)

2: SISTEMA DE AUTENTICACIÓN (APARTADO 1)


IMPLEMENTAR EN UsuarioManager:
- Validación de contraseñas robustas (8+ chars, mayús, minús, números, símbolos)
- Hash seguro con bcrypt
- Verificación de contraseñas usando bcrypt.checkpw()
- Almacenamiento seguro en JSON (solo hashes)
- Logging de operaciones criptográficas

MÉTODOS:
- método validar_contraseña_robusta(contraseña) → bool 
- método hash_contraseña(contraseña) → str
- método verificar_contraseña(contraseña, hash) → bool
- método registrar_usuario(usuario, contraseña, email) → bool
- método autenticar_usuario(usuario, contraseña) → bool

3: CIFRADO SIMÉTRICO AES (APARTADO 2)


IMPLEMENTAR EN CriptografiaManager:
- Generación de claves AES-256
- Cifrado AES-256-CBC (usa IV aleatorio de 16 bytes por cada mensaje)
- Descifrado AES-256-CBC (con verificación de padding PKCS7)
- Gestión segura de claves con PBKDF2
- Codificación Base64 para almacenamiento en JSON

MÉTODOS REQUERIDOS:
- método generar_clave_aes() → bytes 
- método generar_iv() → bytes
- método cifrar_aes(mensaje, clave, iv) → bytes (AES-256-... con padding PKCS7)
- método descifrar_aes(mensaje_cifrado, clave, iv) → str (AES-256-..., validar padding)
- método cifrar_mensaje(mensaje) → dict (AES + convertir a Base64)
- método descifrar_mensaje(mensaje_cifrado) → str (Base64 - AES - texto original)

4: AUTENTICACIÓN HMAC (APARTADO 3)


IMPLEMENTAR EN CriptografiaManager:
- Generación de claves HMAC-SHA256
- Cálculo de etiquetas HMAC
- Verificación de integridad HMAC (detectar si el mensaje fue alterado)
- Protección contra ataques de modificación

MÉTODOS REQUERIDOS:
- método generar_clave_hmac() → bytes
- método calcular_hmac(mensaje, clave) → bytes
- método verificar_hmac(mensaje, etiqueta, clave) → bool
- método mensaje_con_hmac(mensaje_cifrado) → dict (cifrado + HMAC + IV en Base64)
- método verificar_mensaje_hmac(mensaje_con_hmac) → bool (verificar antes de descifrar)


MAIN:

MENÚ PRINCIPAL:
1. Registrar usuario
2. Iniciar sesión
3. Ver información del sistema
4. Salir

MENÚ AUTENTICADO:
1. Registrar perro
2. Ver mis perros
3. Explorar perros públicos
4. Enviar mensaje
5. Ver mensajes
6. Cerrar sesión





RESTO DE APARTADOS

